   char buffer[BUFFER_SIZE]; // buffer to read input text
    int pipes[3][2]; // array of pipes for communication with child processes
    int i, j, fd_max, bytes_read;
    fd_set fds;
    pid_t pid[3];

    // create pipes for communication with child processes
    for (i = 0; i < 3; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("pipe");
            exit(1);
        }
    }

    // create child processes
    for (i = 0; i < 3; i++) {
        if ((pid[i] = fork()) == -1) {
            perror("fork");
            exit(1);
        } else if (pid[i] == 0) {
            // child process
            // child processes
            for (i = 0; i < 3; i++) {
                close(pipes[i][1]); // close write end of pipe
                char buf[BUFFER_SIZE];
                int bytes_read = 0;

                while ((bytes_read = read(pipes[i][0], buf, BUFFER_SIZE - 1)) > 0) {
                    buf[bytes_read] = '\0'; // add null terminator
                    printf("Child process %d received: %s\n", i + 2, buf);
                }

                close(pipes[i][0]); // close read end of pipe
                exit(EXIT_SUCCESS);
            }

        } else {
            // parent process
            close(pipes[i][0]); // close read end of pipe
        }
    }

// parent process
// parent process
    int indices[3] = {0, 1, 2};
    int current_index = 0;
    while ((bytes_read = read(STDIN_FILENO, buffer, BUFFER_SIZE - 1)) > 0) {
        buffer[bytes_read] = '\0'; // add null terminator

        // write to child processes
        for (i = 0; i < 3; i++) {
            int index = indices[(current_index + i) % 3];
            int start = index * 10;
            int remaining = bytes_read - start;
            int count = (remaining >= 10) ? 10 : remaining;
            write(pipes[index][1], buffer + start, count);
        }
        current_index++;
        current_index %= 3;

        // wait for child processes to read from pipes
        FD_ZERO(&fds);
        fd_max = 0;
        for (i = 0; i < 3; i++) {
            FD_SET(pipes[i][0], &fds);
            if (pipes[i][0] > fd_max) {
                fd_max = pipes[i][0];
            }
        }
        select(fd_max + 1, &fds, NULL, NULL, NULL);
    }



    // close write ends of pipes to signal end of input to child processes
    for (i = 0; i < 3; i++) {
        close(pipes[i][1]);
    }

    // wait for child processes to terminate
    for (i = 0; i < 3; i++) {
        waitpid(pid[i], NULL, 0);
    }